generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id   String   @id @default(dbgenerated("gen_random_uuid()")) @map("user_id") @db.Uuid
  type UserType @default(DEFAULT)

  email    String? @unique @map("email")
  username String  @map("username")
  password String? @map("password") @db.Char(60)

  ownedRooms Room[]
  rooms      RoomPlayer[]
  messages   RoomMessage[]

  sessions          UserSession[]
  passwordRecovery  UserPasswordRecovery?
  emailConfirmation UserEmailConfirmation?

  emailVerifiedAt DateTime? @map("email_verified_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

enum UserType {
  DEFAULT
  GOOGLE
  GUEST
}

model UserSession {
  id String @id @default(dbgenerated("gen_random_uuid()")) @map("session_id") @db.Uuid

  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String @map("user_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("user_sessions")
}

model UserEmailConfirmation {
  id String @id @default(dbgenerated("gen_random_uuid()")) @map("confirmation_id") @db.Uuid

  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String @unique @map("user_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("user_email_confirmation")
}

model UserPasswordRecovery {
  id String @id @default(dbgenerated("gen_random_uuid()")) @map("recovery_id") @db.Uuid

  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String @unique @map("user_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("user_password_recovery")
}

model Room {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @map("room_id") @db.Uuid
  name String @unique @map("name")

  type   RoomType   @default(PUBLIC) @map("room_type")
  status RoomStatus @default(PENDING) @map("room_status")

  players  RoomPlayer[]  @relation("RoomPlayers")
  messages RoomMessage[]

  currentPlayer   RoomPlayer? @relation("RoomCurrentPlayer", fields: [currentPlayerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  currentPlayerId String?     @map("current_player_id") @db.Uuid

  winningPlayer   RoomPlayer? @relation("RoomWinningPlayer", fields: [winningPlayerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  winningPlayerId String?     @map("winning_player_id") @db.Uuid

  creator   User   @relation(fields: [creatorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  creatorId String @map("creator_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("rooms")
}

enum RoomType {
  PUBLIC
  PRIVATE
}

enum RoomStatus {
  PENDING
  STARTED
  FINISHED
}

model RoomPlayer {
  id String @id @default(dbgenerated("gen_random_uuid()")) @map("player_id") @db.Uuid

  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String @map("user_id") @db.Uuid

  room   Room   @relation("RoomPlayers", fields: [roomId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roomId String @map("room_id") @db.Uuid

  currentRooms Room[] @relation("RoomCurrentPlayer")
  winningRooms Room[] @relation("RoomWinningPlayer")

  ships       RoomPlayerShip[]
  sourceShots RoomPlayerShot[] @relation("PlayerSourceShots")
  targetShots RoomPlayerShot[] @relation("PlayerTargetShots")

  readyAt   DateTime? @map("ready_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")

  @@unique([userId, roomId], map: "room_players_unique")
  @@map("room_players")
}

model RoomPlayerShip {
  id String @id @default(dbgenerated("gen_random_uuid()")) @map("ship_id") @db.Uuid

  player   RoomPlayer @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId String     @map("player_id") @db.Uuid

  positionX Int @map("position_x")
  positionY Int @map("position_y")

  type        ShipType        @map("ship_type")
  orientation ShipOrientation @map("ship_orientation")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("room_player_ships")
}

enum ShipType {
  Quadruple
  Triple
  Double
  Single
}

enum ShipOrientation {
  Horizontal
  Vertical
}

model RoomPlayerShot {
  id String @id @default(dbgenerated("gen_random_uuid()")) @map("shot_id") @db.Uuid

  sourcePlayer   RoomPlayer @relation("PlayerSourceShots", fields: [sourcePlayerId], references: [id], onDelete: Cascade)
  sourcePlayerId String     @map("source_player_id") @db.Uuid

  targetPlayer   RoomPlayer @relation("PlayerTargetShots", fields: [targetPlayerId], references: [id], onDelete: Cascade)
  targetPlayerId String     @map("target_player_id") @db.Uuid

  positionX Int @map("position_x")
  positionY Int @map("position_y")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("room_player_shots")
}

model RoomMessage {
  id String @id @default(dbgenerated("gen_random_uuid()")) @map("message_id") @db.Uuid

  room   Room   @relation(fields: [roomId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roomId String @map("room_id") @db.Uuid

  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String @map("user_id") @db.Uuid

  text String @map("text")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("room_messages")
}
